name: Release

on:
  release:
    types: [published]

jobs:
  build:
    name: "Release"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Restore Nuget Packages
      run: dotnet restore FileProcessor.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build FileProcessor.sln --configuration Release

    - name: Run Unit Tests
      run: |
        echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
        dotnet test "FileProcessor.BusinessLogic.Tests\FileProcessor.BusinessLogic.Tests.csproj"
        dotnet test "FileProcessor.FileAggregate.Tests\FileProcessor.FileAggregate.Tests.csproj"
        dotnet test "FileProcessor.FileImportLogAggregate.Tests\FileProcessor.FileImportLogAggregate.Tests.csproj"
        dotnet test "FileProcessor.DomainEvents.Tests\FileProcessor.DomainEvents.Tests.csproj"      

    - name: Publish Images to Docker Hub - Pre Release
      if: ${{ github.event.release.prerelease == true }} 
      run: |
        docker build . --file FileProcessor/Dockerfile --tag stuartferguson/fileprocessor:dev
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/fileprocessor:dev

    - name: Publish Images to Docker Hub - Formal Release
      if: ${{ github.event.release.prerelease == false }} 
      run: |
        docker build . --file FileProcessor/Dockerfile --tag stuartferguson/fileprocessor:latest
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/fileprocessor:latest

    - name: Publish API
      if: ${{ github.event.release.prerelease == false }}
      run: dotnet publish "FileProcessor\FileProcessor.csproj" --configuration Release --output publishOutput -r win-x64 --self-contained

    - name: Install Octopus CLI
      if: ${{ github.event.release.prerelease == false }}
      run: |
        sudo apt update && sudo apt install --no-install-recommends gnupg curl ca-certificates apt-transport-https && \
        curl -sSfL https://apt.octopus.com/public.key | sudo apt-key add - && \
        sudo sh -c "echo deb https://apt.octopus.com/ stable main > /etc/apt/sources.list.d/octopus.com.list" && \
        sudo apt update && sudo apt install octopuscli

    - name: Pack Files for Octopus
      if: ${{ github.event.release.prerelease == false }}
      run: >-
        octo pack
        --outFolder /home/runner/work/FileProcessor/FileProcessor
        --basePath /home/runner/work/FileProcessor/FileProcessor/publishOutput
        --id FileProcessor
        --version ${{ steps.get_version.outputs.VERSION }}
        --format zip
        --verbose
        --logLevel=verbose

    - name: Push Package to Octopus
      if: ${{ github.event.release.prerelease == false }}
      run: >-
        octo push
        --server ${{ secrets.OCTOPUS_URL }}
        --apiKey ${{ secrets.OCTOPUS_APIKEY }}
        --package /home/runner/work/FileProcessor/FileProcessor/FileProcessor.${{ steps.get_version.outputs.VERSION }}.zip
        --overwrite-mode IgnoreIfExists
    
    - name: Get Release
      if: ${{ github.event.release.prerelease == false }}
      id: getrelease
      uses: octokit/request-action@v2.0.17
      with:
          route: GET /repos/TransactionProcessing/FileProcessor/releases/tags/${{ steps.get_version.outputs.VERSION }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Release Notes
      if: ${{ github.event.release.prerelease == false }}
      id: buildreleasenotes
      uses: gr2m/get-json-paths-action@v1.x
      with:
          json: ${{ steps.getrelease.outputs.data }}
          releasenote: "body"
    
    - name: Create & Deploy Release in Octopus
      if: ${{ github.event.release.prerelease == false }}
      run: >-
        octo  create-release
        --server ${{ secrets.OCTOPUS_URL }}
        --apiKey ${{ secrets.OCTOPUS_APIKEY }}
        --project "File Processor"
        --version ${{ steps.get_version.outputs.VERSION }}
        --channel Default
        --deployTo Staging
        --waitfordeployment
        --deploymenttimeout 00:05:00
        --releasenotes "${{ steps.buildreleasenotes.outputs.releasenote }}" 
        
    - name: Build and Publish Nuget Packages
      if: ${{ github.event.release.prerelease == false }}
      run: |
        dotnet pack "FileProcessor.File.DomainEvents\FileProcessor.File.DomainEvents.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets -c Release
        dotnet nuget push Nugets/FileProcessor.File.DomainEvents.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.PRIVATEFEED_APIKEY }} --source ${{ secrets.PRIVATEFEED_URL }}
        dotnet pack "FileProcessor.FileImportLog.DomainEvents\FileProcessor.FileImportLog.DomainEvents.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets -c Release
        dotnet nuget push Nugets/FileProcessor.FileImportLog.DomainEvents.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.PRIVATEFEED_APIKEY }} --source ${{ secrets.PRIVATEFEED_URL }}
        dotnet pack "FileProcessor.Client\FileProcessor.Client.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets -c Release
        dotnet nuget push Nugets/FileProcessor.Client.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.PRIVATEFEED_APIKEY }} --source ${{ secrets.PRIVATEFEED_URL }}
