// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FileProcessor.IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetFileImportDetails")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("base")]
    [NUnit.Framework.CategoryAttribute("shared")]
    [NUnit.Framework.CategoryAttribute("getfileimportdetails")]
    public partial class GetFileImportDetailsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "base",
                "shared",
                "getfileimportdetails"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GetFileImportDetails", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GetFileImportDetails.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Description"});
            table1.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST Scope",
                        "A scope for Estate Managememt REST"});
            table1.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST  Scope",
                        "A scope for Transaction Processor REST"});
            table1.AddRow(new string[] {
                        "voucherManagement",
                        "Voucher Management REST  Scope",
                        "A scope for Voucher Management REST"});
            table1.AddRow(new string[] {
                        "fileProcessor",
                        "File Processor REST Scope",
                        "A scope for File Processor REST"});
#line 5
 await testRunner.GivenAsync("I create the following api scopes", ((string)(null)), table1, "Given ");
#line hidden
            global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                        "Name",
                        "DisplayName",
                        "Secret",
                        "Scopes",
                        "UserClaims"});
            table2.AddRow(new string[] {
                        "estateManagement",
                        "Estate Managememt REST",
                        "Secret1",
                        "estateManagement",
                        "MerchantId, EstateId, role"});
            table2.AddRow(new string[] {
                        "transactionProcessor",
                        "Transaction Processor REST",
                        "Secret1",
                        "transactionProcessor",
                        ""});
            table2.AddRow(new string[] {
                        "voucherManagement",
                        "Voucher Management REST",
                        "Secret1",
                        "voucherManagement",
                        ""});
            table2.AddRow(new string[] {
                        "fileProcessor",
                        "File Processor REST",
                        "Secret1",
                        "fileProcessor",
                        ""});
#line 12
 await testRunner.GivenAsync("the following api resources exist", ((string)(null)), table2, "Given ");
#line hidden
            global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                        "ClientId",
                        "ClientName",
                        "Secret",
                        "Scopes",
                        "GrantTypes"});
            table3.AddRow(new string[] {
                        "serviceClient",
                        "Service Client",
                        "Secret1",
                        "estateManagement,transactionProcessor,voucherManagement,fileProcessor",
                        "client_credentials"});
#line 19
 await testRunner.GivenAsync("the following clients exist", ((string)(null)), table3, "Given ");
#line hidden
            global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                        "ClientId"});
            table4.AddRow(new string[] {
                        "serviceClient"});
#line 23
 await testRunner.GivenAsync("I have a token to access the estate management and transaction processor resource" +
                    "s", ((string)(null)), table4, "Given ");
#line hidden
            global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                        "EstateName"});
            table5.AddRow(new string[] {
                        "Test Estate 1"});
#line 27
 await testRunner.GivenAsync("I have created the following estates", ((string)(null)), table5, "Given ");
#line hidden
            global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "RequireCustomMerchantNumber",
                        "RequireCustomTerminalNumber"});
            table6.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "True",
                        "True"});
            table6.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "True",
                        "True"});
#line 31
 await testRunner.GivenAsync("I have created the following operators", ((string)(null)), table6, "Given ");
#line hidden
            global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName"});
            table7.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom"});
            table7.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher"});
#line 36
 await testRunner.AndAsync("I have assigned the following operators to the estates", ((string)(null)), table7, "And ");
#line hidden
            global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription"});
            table8.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract"});
            table8.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "Hospital 1 Contract"});
#line 41
 await testRunner.GivenAsync("I create a contract with the following values", ((string)(null)), table8, "Given ");
#line hidden
            global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "DisplayText",
                        "Value",
                        "ProductType"});
            table9.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Custom",
                        "",
                        "MobileTopup"});
            table9.AddRow(new string[] {
                        "Test Estate 1",
                        "Voucher",
                        "Hospital 1 Contract",
                        "10 KES",
                        "10 KES",
                        "",
                        "Voucher"});
#line 46
 await testRunner.WhenAsync("I create the following Products", ((string)(null)), table9, "When ");
#line hidden
            global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "OperatorName",
                        "ContractDescription",
                        "ProductName",
                        "CalculationType",
                        "FeeDescription",
                        "Value"});
            table10.AddRow(new string[] {
                        "Test Estate 1",
                        "Safaricom",
                        "Safaricom Contract",
                        "Variable Topup",
                        "Fixed",
                        "Merchant Commission",
                        "2.50"});
#line 51
 await testRunner.WhenAsync("I add the following Transaction Fees", ((string)(null)), table10, "When ");
#line hidden
            global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                        "MerchantName",
                        "AddressLine1",
                        "Town",
                        "Region",
                        "Country",
                        "ContactName",
                        "EmailAddress",
                        "EstateName"});
            table11.AddRow(new string[] {
                        "Test Merchant 1",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 1",
                        "testcontact1@merchant1.co.uk",
                        "Test Estate 1"});
            table11.AddRow(new string[] {
                        "Test Merchant 2",
                        "Address Line 1",
                        "TestTown",
                        "Test Region",
                        "United Kingdom",
                        "Test Contact 1",
                        "testcontact1@merchant2.co.uk",
                        "Test Estate 1"});
#line 55
 await testRunner.GivenAsync("I create the following merchants", ((string)(null)), table11, "Given ");
#line hidden
            global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                        "OperatorName",
                        "MerchantName",
                        "MerchantNumber",
                        "TerminalNumber",
                        "EstateName"});
            table12.AddRow(new string[] {
                        "Safaricom",
                        "Test Merchant 1",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table12.AddRow(new string[] {
                        "Voucher",
                        "Test Merchant 1",
                        "00000001",
                        "10000001",
                        "Test Estate 1"});
            table12.AddRow(new string[] {
                        "Safaricom",
                        "Test Merchant 2",
                        "00000002",
                        "10000002",
                        "Test Estate 1"});
            table12.AddRow(new string[] {
                        "Voucher",
                        "Test Merchant 2",
                        "00000002",
                        "10000002",
                        "Test Estate 1"});
#line 60
 await testRunner.GivenAsync("I have assigned the following  operator to the merchants", ((string)(null)), table12, "Given ");
#line hidden
            global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                        "DeviceIdentifier",
                        "MerchantName",
                        "EstateName"});
            table13.AddRow(new string[] {
                        "123456780",
                        "Test Merchant 1",
                        "Test Estate 1"});
            table13.AddRow(new string[] {
                        "123456781",
                        "Test Merchant 2",
                        "Test Estate 1"});
#line 67
 await testRunner.GivenAsync("I have assigned the following devices to the merchants", ((string)(null)), table13, "Given ");
#line hidden
            global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                        "EstateName",
                        "MerchantName",
                        "ContractDescription"});
            table14.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 1",
                        "Safaricom Contract"});
            table14.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 1",
                        "Hospital 1 Contract"});
            table14.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 2",
                        "Safaricom Contract"});
            table14.AddRow(new string[] {
                        "Test Estate 1",
                        "Test Merchant 2",
                        "Hospital 1 Contract"});
#line 72
 await testRunner.WhenAsync("I add the following contracts to the following merchants", ((string)(null)), table14, "When ");
#line hidden
            global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                        "Reference",
                        "Amount",
                        "DateTime",
                        "MerchantName",
                        "EstateName"});
            table15.AddRow(new string[] {
                        "Deposit1",
                        "300.00",
                        "Today",
                        "Test Merchant 1",
                        "Test Estate 1"});
            table15.AddRow(new string[] {
                        "Deposit1",
                        "300.00",
                        "Today",
                        "Test Merchant 2",
                        "Test Estate 1"});
#line 79
 await testRunner.GivenAsync("I make the following manual merchant deposits", ((string)(null)), table15, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get File Import Log Details")]
        [NUnit.Framework.CategoryAttribute("PRTest")]
        public async System.Threading.Tasks.Task GetFileImportLogDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get File Import Log Details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "Column1",
                            "Column2",
                            "Column3"});
                table16.AddRow(new string[] {
                            "H",
                            "20210508",
                            ""});
                table16.AddRow(new string[] {
                            "D",
                            "07777777775",
                            "100"});
                table16.AddRow(new string[] {
                            "T",
                            "1",
                            ""});
#line 86
 await testRunner.GivenAsync("I have a file named \'SafarcomTopup1.txt\' with the following contents", ((string)(null)), table16, "Given ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "FileProfileId",
                            "UserId"});
                table17.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "B2A59ABF-293D-4A6B-B81B-7007503C3476",
                            "ABA59ABF-293D-4A6B-B81B-7007503C3476"});
#line 91
 await testRunner.AndAsync("I upload this file for processing", ((string)(null)), table17, "And ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "Column1",
                            "Column2",
                            "Column3"});
                table18.AddRow(new string[] {
                            "H",
                            "20210508",
                            ""});
                table18.AddRow(new string[] {
                            "D",
                            "07777777776",
                            "150"});
                table18.AddRow(new string[] {
                            "T",
                            "1",
                            ""});
#line 95
 await testRunner.GivenAsync("I have a file named \'SafarcomTopup2.txt\' with the following contents", ((string)(null)), table18, "Given ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "FileProfileId",
                            "UserId"});
                table19.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 2",
                            "B2A59ABF-293D-4A6B-B81B-7007503C3476",
                            "ABA59ABF-293D-4A6B-B81B-7007503C3476"});
#line 100
 await testRunner.AndAsync("I upload this file for processing", ((string)(null)), table19, "And ");
#line hidden
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "Column1",
                            "Column2",
                            "Column3",
                            "Column4"});
                table20.AddRow(new string[] {
                            "H",
                            "20210508",
                            "",
                            ""});
                table20.AddRow(new string[] {
                            "D",
                            "Hospital 1",
                            "07777777775",
                            "10"});
                table20.AddRow(new string[] {
                            "D",
                            "Hospital 1",
                            "testrecipient1@recipient.com",
                            "10"});
                table20.AddRow(new string[] {
                            "T",
                            "1",
                            "",
                            ""});
#line 104
 await testRunner.GivenAsync("I have a file named \'VoucherIssue1.txt\' with the following contents", ((string)(null)), table20, "Given ");
#line hidden
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "EstateName",
                            "MerchantName",
                            "FileProfileId",
                            "UserId"});
                table21.AddRow(new string[] {
                            "Test Estate 1",
                            "Test Merchant 1",
                            "8806EDBC-3ED6-406B-9E5F-A9078356BE99",
                            "ABA59ABF-293D-4A6B-B81B-7007503C3476"});
#line 110
 await testRunner.AndAsync("I upload this file for processing", ((string)(null)), table21, "And ");
#line hidden
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "ImportLogDate",
                            "FileCount"});
                table22.AddRow(new string[] {
                            "Today",
                            "3"});
#line 114
 await testRunner.WhenAsync("I get the \'Test Estate 1\' import logs between \'Yesterday\' and \'Today\' the followi" +
                        "ng data is returned", ((string)(null)), table22, "When ");
#line hidden
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "MerchantName",
                            "OriginalFileName"});
                table23.AddRow(new string[] {
                            "Test Merchant 1",
                            "SafarcomTopup1.txt"});
                table23.AddRow(new string[] {
                            "Test Merchant 2",
                            "SafarcomTopup2.txt"});
                table23.AddRow(new string[] {
                            "Test Merchant 1",
                            "VoucherIssue1.txt"});
#line 118
 await testRunner.WhenAsync("I get the \'Test Estate 1\' import log for \'Today\' the following file information i" +
                        "s returned", ((string)(null)), table23, "When ");
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "ProcessingCompleted",
                            "NumberOfLines",
                            "TotaLines",
                            "SuccessfulLines",
                            "IgnoredLines",
                            "FailedLines",
                            "NotProcessedLines"});
                table24.AddRow(new string[] {
                            "True",
                            "3",
                            "3",
                            "1",
                            "2",
                            "0",
                            "0"});
#line 124
 await testRunner.WhenAsync("I get the file \'SafarcomTopup1.txt\' for Estate \'Test Estate 1\' the following file" +
                        " information is returned", ((string)(null)), table24, "When ");
#line hidden
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "LineNumber",
                            "Data",
                            "Result"});
                table25.AddRow(new string[] {
                            "1",
                            "H,20210508,",
                            "Ignored"});
                table25.AddRow(new string[] {
                            "2",
                            "D,07777777775,100",
                            "Successful"});
                table25.AddRow(new string[] {
                            "3",
                            "T,1,",
                            "Ignored"});
#line 128
 await testRunner.WhenAsync("I get the file \'SafarcomTopup1.txt\' for Estate \'Test Estate 1\' the following file" +
                        " lines are returned", ((string)(null)), table25, "When ");
#line hidden
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            "ProcessingCompleted",
                            "NumberOfLines",
                            "TotaLines",
                            "SuccessfulLines",
                            "IgnoredLines",
                            "FailedLines",
                            "NotProcessedLines"});
                table26.AddRow(new string[] {
                            "True",
                            "3",
                            "3",
                            "1",
                            "2",
                            "0",
                            "0"});
#line 134
 await testRunner.WhenAsync("I get the file \'SafarcomTopup2.txt\' for Estate \'Test Estate 1\' the following file" +
                        " information is returned", ((string)(null)), table26, "When ");
#line hidden
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "LineNumber",
                            "Data",
                            "Result"});
                table27.AddRow(new string[] {
                            "1",
                            "H,20210508,",
                            "Ignored"});
                table27.AddRow(new string[] {
                            "2",
                            "D,07777777776,150",
                            "Successful"});
                table27.AddRow(new string[] {
                            "3",
                            "T,1,",
                            "Ignored"});
#line 138
 await testRunner.WhenAsync("I get the file \'SafarcomTopup2.txt\' for Estate \'Test Estate 1\' the following file" +
                        " lines are returned", ((string)(null)), table27, "When ");
#line hidden
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "ProcessingCompleted",
                            "NumberOfLines",
                            "TotaLines",
                            "SuccessfulLines",
                            "IgnoredLines",
                            "FailedLines",
                            "NotProcessedLines"});
                table28.AddRow(new string[] {
                            "True",
                            "4",
                            "4",
                            "2",
                            "2",
                            "0",
                            "0"});
#line 144
 await testRunner.WhenAsync("I get the file \'VoucherIssue1.txt\' for Estate \'Test Estate 1\' the following file " +
                        "information is returned", ((string)(null)), table28, "When ");
#line hidden
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "LineNumber",
                            "Data",
                            "Result"});
                table29.AddRow(new string[] {
                            "1",
                            "H,20210508,,",
                            "Ignored"});
                table29.AddRow(new string[] {
                            "2",
                            "D,Hospital 1,07777777775,10",
                            "Successful"});
                table29.AddRow(new string[] {
                            "3",
                            "D,Hospital 1,testrecipient1@recipient.com,10",
                            "Successful"});
                table29.AddRow(new string[] {
                            "4",
                            "T,1,,",
                            "Ignored"});
#line 148
 await testRunner.WhenAsync("I get the file \'VoucherIssue1.txt\' for Estate \'Test Estate 1\' the following file " +
                        "lines are returned", ((string)(null)), table29, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
